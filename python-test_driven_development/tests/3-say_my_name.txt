Testing my function: def say_my_name(first_name, last_name=""):

>>> say_my_name = __import__('3-say_my_name').say_my_name

=============
1. Rare chars
=============

>>> say_my_name("#$&&&@", "????")
My name is #$&&&@ ????

====================
2. Integer and float
====================

>>> say_my_name(333, 44.99)
Traceback (most recent call last):
...
TypeError: first_name must be a string

========
3. Empty
========

>>> say_my_name()
Traceback (most recent call last):
...
TypeError: say_my_name() missing 1 required positional argument: 'first_name'

=============
4. Only 1 arg
=============

>>> say_my_name("Camilo")
My name is Camilo 

==========
5. Numbers
==========

>>> say_my_name(33.33, "Botero")
Traceback (most recent call last):
...
TypeError: first_name must be a string

>>> say_my_name("Juan", 44.44)
Traceback (most recent call last):
...
TypeError: last_name must be a string

>>> say_my_name(1024)
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name([1024])
Traceback (most recent call last):
TypeError: first_name must be a string

===============
6. +2 arguments
===============

>>> say_my_name("Juan", "Cruz", "Botero")
Traceback (most recent call last):
...
TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

==============
7. Normal case
==============

>>> say_my_name("Camilo", "Estrada")
My name is Francisco Camilo

========
8. Nones
========

>>> say_my_name(None)
Traceback (most recent call last):
...
TypeError: first_name must be a string

>>> say_my_name(None, "Fito")
Traceback (most recent call last):
...
TypeError: first_name must be a string

>>> say_my_name("Carlos", None)
Traceback (most recent call last):
...
TypeError: last_name must be a string

=========
9. Emptys
=========

>>> say_my_name(                      )
Traceback (most recent call last):
...
TypeError: say_my_name() missing 1 required positional argument: 'first_name'

>>> say_my_name("", "")
My name is  

>>> say_my_name(" ", " ")
My name is    

>>> say_my_name("Mark", "")
My name is Francisco 

>>> say_my_name(" ", "Juan")
My name is   RamÃ­rez

>>> say_my_name("Victor", )
My name is Bob 